#!/bin/bash

describe_aws_instance() {
  aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=service-cluster"
}

get_major_ip(){
  describe_aws_instance \
    | jq -r '.Reservations[].Instances[].PublicIpAddress' \
    | grep -v null \
    | head -n 1
}

establish_ssh_tunnel(){
  local ip_address="$1"

  ssh -t -t -L 61222:localhost:8182 "core@$ip_address" &> /dev/null
}

kill_ssh_tunnel_job() {
  local parent_pid="$1"
  pkill -P "$parent_pid" -f 'ssh -t -t -L 61222:localhost:8182'
}

wait_for_tunnel() {
  local tunnel_open="1"
  while [ "$tunnel_open" != "0" ]; do
    echo -n "."
    curl http://localhost:61222 &> /dev/null
    tunnel_open="$?"
    sleep 0.25
  done
  echo ""
}

assert_port_free() {
  curl http://localhost:61222 &> /dev/null
  local exit_code="$?"
  if [ "$exit_code" == "0" ]; then
    echo "Port 61222 seems to be in use, cowardly refusing to do anything"
    exit 1
  fi
}

assert_vctl_capabilities() {
  vctl --help | grep 'job-logger' &> /dev/null

  local exit_code="$?"
  if [ "${exit_code}" != "0" ]; then
    echo "vctl doesn't know about job-logger. Proudly refusing to use imported software"
    echo "go get github.com/octoblu/vulcand-bundle/vctl"
    exit $exit_code
  fi
}

do_vulcan_sync() {
  local vulcan_url="$1"
  local project_name="$2"

  sync_backend "${vulcan_url}" "${project_name}"
  sync_frontend "${vulcan_url}" "${project_name}"
  for middleware in ${HOME}/Projects/Octoblu/the-stack-env-production/vulcan.d/${project_name}/middlewares/*; do
    sync_middleware "${vulcan_url}" "${project_name}" "${middleware}"
  done
}

sync_backend(){
  local vulcan_url="$1"
  local project_name="$2"
  local args=$(cat "${HOME}/Projects/Octoblu/the-stack-env-production/vulcan.d/${project_name}/backend")
  vctl --vulcan "${vulcan_url}" backend upsert $args
}

sync_frontend(){
  local vulcan_url="$1"
  local project_name="$2"
  local args=$(cat "${HOME}/Projects/Octoblu/the-stack-env-production/vulcan.d/${project_name}/frontend")
  vctl --vulcan "${vulcan_url}" frontend upsert $args
}

sync_middleware(){
  local vulcan_url="$1"
  local project_name="$2"
  local middleware="$3"
  local middleware_type=$(basename "${middleware}")
  local args=$(cat "${middleware}")

  vctl --vulcan "${vulcan_url}" "${middleware_type}" upsert $args
}

usage(){
  echo "USAGE: vulcansync <load/l> <project-name> [vulcan-url]"
  echo ""
  echo "example: vulcansync octoblu-governator-service"
  exit 1
}

validate_cmd() {
  local cmd="$1"

  if [ "$cmd" == "load" -o "$cmd" == "l" ]; then
    return
  fi

  echo "Command must be one of load/l"
  usage
}

main(){
  local cmd="$1"
  local project="$2"
  local vulcan_url="$3"
  validate_cmd "$cmd"

  if [ -z "$project" -o "$project" == "--help" -o "$project" == "-h" -o "$vulcan_url" == "--help" -o "$vulcan_url" == "-h" ]; then
    usage
  fi

  if [ -n "$vulcan_url" ]; then
    do_vulcan_sync "$vulcan_url" "$project" "$cmd"
    exit $?
  fi

  assert_vctl_capabilities
  assert_port_free

  local ip_address="$(get_major_ip)"
  establish_ssh_tunnel "$ip_address" & # in the background
  local ssh_tunnel_job="$!"

  echo -n "Waiting for tunnel"
  wait_for_tunnel
  echo "Tunnel established, working."
  do_vulcan_sync http://localhost:61222 "$project" "$cmd"
  local exit_code=$?

  kill_ssh_tunnel_job "$ssh_tunnel_job"

  exit $exit_code
}

main $@
